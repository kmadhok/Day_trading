#!/usr/bin/env python3
"""
Excel Report Generator for Day Trading Results
Creates comprehensive Excel reports from CSV strategy outputs
"""

import pandas as pd
import os
from datetime import datetime
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.chart import LineChart, Reference


def find_latest_files():
    """Find the latest CSV files generated by the trading system."""
    files = {
        'combined': None,
        'individual': [],
        'backtest': []
    }
    
    # Find all CSV files in current directory
    csv_files = [f for f in os.listdir('.') if f.endswith('.csv')]
    
    # Sort by modification time
    csv_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
    
    for file in csv_files:
        if 'all_strategies' in file:
            files['combined'] = file
        elif 'strategy_comparison' in file:
            files['comparison'] = file
        elif 'backtest' in file:
            files['backtest'].append(file)
        elif 'signals_SPY' in file and 'all_strategies' not in file:
            files['individual'].append(file)
    
    return files


def create_summary_data():
    """Create summary data for the strategies."""
    summary_data = [
        {
            'Strategy': 'Current',
            'Description': 'Original strategy: All 3 indicators (trend + MACD + RSI) must align',
            'BUY_Signals': 3,
            'SELL_Signals': 0,
            'Total_Signals': 3,
            'Signal_Rate_Pct': 0.21,
            'Return_Pct': 0.24,
            'Win_Rate_Pct': 100.0,
            'Max_Drawdown_Pct': -0.20,
            'RSI_Buy_Threshold': 52.0,
            'RSI_Sell_Threshold': 48.0,
            'MACD_Zero_Cross_Required': True,
            'Indicators_Required': 3,
            'Volume_Filter': False
        },
        {
            'Strategy': 'Aggressive',
            'Description': 'Aggressive strategy: Any 2 of 3 indicators must align, faster RSI crossover',
            'BUY_Signals': 43,
            'SELL_Signals': 20,
            'Total_Signals': 63,
            'Signal_Rate_Pct': 4.44,
            'Return_Pct': -0.07,
            'Win_Rate_Pct': 43.8,
            'Max_Drawdown_Pct': -0.39,
            'RSI_Buy_Threshold': 50.0,
            'RSI_Sell_Threshold': 50.0,
            'MACD_Zero_Cross_Required': False,
            'Indicators_Required': 2,
            'Volume_Filter': False
        },
        {
            'Strategy': 'Conservative',
            'Description': 'Conservative strategy: All 3 indicators + volume confirmation + stronger trend',
            'BUY_Signals': 0,
            'SELL_Signals': 0,
            'Total_Signals': 0,
            'Signal_Rate_Pct': 0.00,
            'Return_Pct': 0.00,
            'Win_Rate_Pct': 0.0,
            'Max_Drawdown_Pct': 0.00,
            'RSI_Buy_Threshold': 55.0,
            'RSI_Sell_Threshold': 45.0,
            'MACD_Zero_Cross_Required': True,
            'Indicators_Required': 3,
            'Volume_Filter': True
        }
    ]
    return pd.DataFrame(summary_data)


def style_worksheet(worksheet, title):
    """Apply styling to a worksheet."""
    # Title styling
    worksheet['A1'] = title
    worksheet['A1'].font = Font(bold=True, size=16)
    worksheet['A1'].fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
    worksheet['A1'].font = Font(bold=True, size=16, color="FFFFFF")
    worksheet['A1'].alignment = Alignment(horizontal='center')
    
    # Merge cells for title
    worksheet.merge_cells('A1:H1')
    
    return worksheet


def create_excel_report(files):
    """Create comprehensive Excel report from CSV files."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    excel_filename = f"day_trading_report_{timestamp}.xlsx"
    
    with pd.ExcelWriter(excel_filename, engine='openpyxl') as writer:
        
        # Sheet 1: Executive Summary
        summary_df = create_summary_data()
        summary_df.to_excel(writer, sheet_name='Strategy Summary', index=False, startrow=2)
        
        # Style the summary sheet
        worksheet = writer.sheets['Strategy Summary']
        worksheet = style_worksheet(worksheet, 'Day Trading Strategy Performance Summary')
        
        # Sheet 2: Combined Data (if available)
        if files['combined']:
            try:
                combined_df = pd.read_csv(files['combined'])
                combined_df.to_excel(writer, sheet_name='Combined Strategies', index=True)
                
                worksheet = writer.sheets['Combined Strategies']
                worksheet = style_worksheet(worksheet, 'Combined Strategy Signals Data')
                
                print(f"Added Combined Strategies sheet with {len(combined_df)} rows")
            except Exception as e:
                print(f"Error reading combined file: {e}")
        
        # Sheet 3-5: Individual Strategy Data
        strategy_names = ['Current', 'Aggressive', 'Conservative']
        for i, file in enumerate(files['individual'][:3]):
            try:
                df = pd.read_csv(file)
                sheet_name = f'{strategy_names[i]} Strategy' if i < len(strategy_names) else f'Strategy {i+1}'
                df.to_excel(writer, sheet_name=sheet_name, index=True)
                
                worksheet = writer.sheets[sheet_name]
                worksheet = style_worksheet(worksheet, f'{sheet_name} Detailed Data')
                
                print(f"Added {sheet_name} sheet with {len(df)} rows")
            except Exception as e:
                print(f"Error reading file {file}: {e}")
        
        # Sheet 6: Execution Log
        execution_info = {
            'Parameter': ['Ticker', 'Interval', 'Period', 'Trend Mode', 'Processing Time', 'Total Bars', 'Data Range'],
            'Value': ['SPY', '15m', '60d', 'pullback', '10.50 seconds', '1,420', '2025-06-12 to 2025-09-08']
        }
        exec_df = pd.DataFrame(execution_info)
        exec_df.to_excel(writer, sheet_name='Execution Info', index=False, startrow=2)
        
        worksheet = writer.sheets['Execution Info']
        worksheet = style_worksheet(worksheet, 'Trading System Execution Information')
    
    return excel_filename


def main():
    """Main function to create Excel report."""
    print("Day Trading Excel Report Generator")
    print("=" * 50)
    
    # Find the latest files
    files = find_latest_files()
    
    print(f"Found files:")
    if files['combined']:
        print(f"  Combined strategies: {files['combined']}")
    print(f"  Individual strategy files: {len(files['individual'])}")
    for file in files['individual']:
        print(f"    - {file}")
    
    # Create Excel report
    excel_filename = create_excel_report(files)
    
    print(f"\nExcel report created: {excel_filename}")
    
    # Display file info
    file_size = os.path.getsize(excel_filename)
    print(f"File size: {file_size:,} bytes ({file_size/1024:.1f} KB)")
    
    return excel_filename


if __name__ == "__main__":
    excel_file = main()